/*********************************************
 * Hacked: Animations
 *********************************************/
.animate-me(@anim, @dur) {
	-webkit-animation: @anim @dur ease;
	-moz-animation: @anim @dur ease;
	-ms-animation: @anim @dur ease;
	-o-animation: @anim @dur ease;
	animation: @anim @dur ease;
}

@-webkit-keyframes show-up {

from {
    opacity:0;
    -webkit-transform:translateX(-1.5em)
}
to {
    opacity:1;
    -webkit-transform:translateX(0)

}}

@-moz-keyframes show-up {
from {
    opacity:0;
    -moz-transform:translateX(-1.5em)
}
to {
    opacity:1;
    -moz-transform:translateX(0)
}}

@-ms-keyframes show-up {
from {
    opacity:0;
    -ms-transform:translateX(-1.5em)
}
to {
    opacity:1;
    -ms-transform:translateX(0)
}}

@-o-keyframes show-up {
from {
    opacity:0;
    -o-transform:translateX(-1.5em)
}
to {
    opacity:1;
    -o-transform:translateX(0)
}}

@keyframes show-up {
from {
    opacity:0;
    transform:translateX(-1.5em)
}
to {
    opacity:1;
    transform:translateX(0)
}}

@keyframes remove {
from {
	opacity: 1;
	transform:scale(1);
}
	20% {
		opacity: 0.5;
	}
to {
    opacity: 0;
		transform:scale(0.5);
    display: none;
}}


@keyframes activate {
from {
    opacity: 0;
		transform:scale(.1);
		display: none;
}
	50% {
		opacity: 0.5;
	}
to {
    opacity: 1;
    transform:scale(1);
    display: block !important;
}}


// prefix declarations
.prefixed(@property, @value) {
  & when (@webkit = true) {
    -webkit-@{property}: @value;
  }

  & when (@moz = true) {
      -moz-@{property}: @value;
  }

  & when (@ms = true) {
      -ms-@{property}: @value;
  }

  & when (@o = true) {
      -o-@{property}: @value;
  }

  @{property}: @value;
}



.blurr-me(@imgpath) {
  background-image: url(@imgpath);
  background-repeat: no-repeat;
  background-size: 100% 100%;
  filter: grayscale(0.3) blur(2px);
  position: absolute;
  top: 0px;
  right: 0px;
  bottom: 0px;
  left: 0px;
  z-index: 99;
}

.grad(@type; @colors; @dir: 0deg; @prefixes: webkit, moz, ms, o; @index: length(@prefixes)) when (@index > 0) {
    .grad(@type; @colors; @dir; @prefixes; (@index - 1));
 
    @prefix  : extract(@prefixes, @index);
    @dir-old : 90 - (@dir);
 
    background-image: ~"-@{prefix}-@{type}-gradient(@{dir-old}, @{colors})";
  & when ( @index = length(@prefixes) ) {
        background-image: ~"@{type}-gradient(@{dir}, @{colors})";
    }
}